@startuml
class Animation {
// playedOnce = false
- constructor():
==
// calculate elapsed_time
// update currentFrame and startTime
// based on delay, currentFrames and frame length
+ update(): void
+ setter()
+ getter()
+ setFrames(BufferedImage[] frames): void
--
BufferedImage[] frames
int currentFrame
long startTime
long delay
boolean playedOnce
}
class TileMap {
// this also assign bounds and drawing
- constructor(int tile_size):
==
--position--
double x
double y
--bounds--
int xmin
int ymin
int xmax
int ymax
double tween
--map--
int[][] map
int tileSize
int numRows
int numCols
int width
int height
--tileset--
BufferedImage tileset
int numTilesAcross
Tile[][] tiles
--drawing--
int rowOffset
int colOffset
int numRowsToDraw
int numColsToDraw
}
TileMap <-- MapObject
Animation <-- MapObject
abstract class MapObject {
- constructor(TileMap)
==
+ getter()
+ notOnScreen(): bool
+ intersects(MapObject): bool // Rectangle collision box
+ getRectangle(): Rectangle // pos - collision box
+ calculateCorners(double x, double y): void
+ checkTileMapCollision(): void
@overriden by children
+ draw(java.awt.Graphics2D): void
==protected==
--tile stuff--
TileMap tileMap
int tileSize
double xmap
double ymap
--position and vector--
double x
double y
double dx
double dy
--dimensions--
int width
int height
--collision box--
int cwidth
int cheight
--collision--
int currRow
int currCol
double xdest
double ydest
double xtemp
double ytemp
boolean topLeft
boolean topRight
boolean bottomLeft
boolean bottomRight
--animation--
Animation animation
int currentAction
int previousAction
boolean facingRight
--movement--
boolean left
boolean right
boolean up
boolean down
boolean jumping
boolean falling

--movement attributes--
double moveSpeed
double maxSpeed
double stopSpeed
double fallSpeed
double maxFallSpeed
double jumpStart
double stopJumpSpeed
}
class Player {
// manual assigning all atr
// also load sprites
// and putting sfxs
- constructor(TileMap)
==
// loop through enemies
// check check attacks
// check if intersects
+ checkAttack(ArrayList<Enemy> enemy): void
+ hit(int damage): void
+ getNextPosition(): void
+ update(): void
+ draw():void @override
+ getter()
--ENUMS--
int IDLE = 0
int WALKING = 1
int JUMPING = 2
int FALLING = 3
int GLIDING = 4
int FIREBALL = 5
int SCRATCHING = 6
--sound--
HashMap<String, AudioPlayer> sfx
--player stuff--
int health
int maxHealth
int fire
int maxFire
boolean dead
boolean flinching
long flinchTimer
--fireball--
// change to ranged atk?
boolean firing
int fireCost
int fireBallDamage
ArrayList<FireBall> fireBalls
--scratch--
boolean scratching
int scratchDamage
int scratchRange
--gliding--
boolean gliding
--animations--
ArrayList<BufferedImage[]> sprites
final int[] numFrames = {
    2, 8, 1, 2, 4, 2, 5
}; // TODO: change?
}

class Enemy {
- constructor(TileMap)
==
+ isDead(): bool
+ getDamage(): int
+ hit(int damage): void
@to be overriden by children
+ update()
--
boolean dead
int damage
boolean flinching
long flinchTimer
}
class Kadal {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--tounge atk--
bool is_firing
int cooldown
}
class CarnivorePlant {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--devouring--
bool touching_player
int duration
}
class Landak {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--idk what atk he has--
}
MapObject <|-- Player
MapObject <|-- Enemy
Enemy <|-- Landak
Enemy <|-- Kadal
Enemy <|-- CarnivorePlant
@enduml