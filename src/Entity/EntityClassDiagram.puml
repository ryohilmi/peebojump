@startuml
class Player {
// manual assigning all atr
// also load sprites
// and putting sfxs
- constructor(TileMap)
==
// loop through enemies
// check check attacks
// check if intersects
+ checkAttack(ArrayList<Enemy> enemy): void
+ hit(int damage): void
+ getNextPosition(): void
+ update(): void
+ draw():void @override
+ getter()
--ENUMS--
int IDLE = 0
int WALKING = 1
int JUMPING = 2
int FALLING = 3
int FIREBALL = 4
int SCRATCHING = 5
--sound--
HashMap<String, AudioPlayer> sfx
--player stuff--
int health
int maxHealth
int fire
int maxFire
boolean dead
boolean flinching
long flinchTimer
--fireball--
// change to ranged atk?
boolean firing
int fireCost
int fireBallDamage
ArrayList<FireBall> fireBalls
--scratch--
boolean scratching
int scratchDamage
int scratchRange
--gliding--
boolean gliding
--animations--
ArrayList<BufferedImage[]> sprites
final int[] numFrames = {
    2, 8, 1, 2, 4, 2, 5
}; // TODO: change?
}

class Enemy {
- constructor(TileMap)
==
+ isDead(): bool
+ getDamage(): int
+ hit(int damage): void
@to be overriden by children
+ update()
--
boolean dead
int damage
boolean flinching
long flinchTimer
}
class Kadal {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--tounge atk--
bool is_firing
int cooldown
}
class CarnivorePlant {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--devouring--
bool touching_player
int duration
}
class Landak {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--idk what atk he has--
}
@enduml