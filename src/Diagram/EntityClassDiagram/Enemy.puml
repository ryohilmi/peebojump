@startuml
class Enemy extends MapObject{
- constructor(TileMap)
==
+ isDead(): bool
+ getDamage(): int
+ hit(int damage): void
@to be overriden by children
+ update()
--
int time_weight;

int health;
int maxHealth;
boolean dead;
int damage;
int type;

boolean flinching;
long flinchTimer;

// attack
boolean attackRight;
boolean attackLeft;
int attackWidth;
int attackDelay;
int attackCounter;
int attackAnimDelay;

// idle
boolean idle;
int idleWidth;
int idleTime;
int idleCounter;
int idleAnimDelay;

// walk
boolean walk;
int walkWidth;
int walkAnimDelay;
int walkCounter;
int walkMaxDistance;

// enemy type
public static final int LANDAK = 0;
public static final int PLANT = 1;
public static final int KADAL = 2;

// enemy action
static final int IDLE = 0;
static final int ATTACK = 1;
static final int WALK = 2;
}
class Kadal {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getter()
+ hit(int hitDmd): void
+ update(): void
+ draw(Graphics2D): void
+ public void detectPlayer (Player player): void
--tounge atk--
bool is_firing
int cooldown
}
class CarnivorePlant {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--devouring--
bool touching_player
int duration
}
class Landak {
// manually assigning MapObject atr
// try to load sprites
// set facing
- constructor(TileMap)
==
+ getNextPosition(): void
+ update(): void
+ draw(Graphics2D): void
--idk what atk he has--
}
Enemy <|-- Landak
Enemy <|-- Kadal
Enemy <|-- CarnivorePlant
@enduml